generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum TaskStatus {
  todo
  doing
  done
  canceled
}

enum TaskPriority {
  low
  medium
  high
  urgent
}

enum ProjectStatus {
  active
  paused
  completed
  archived
}

model TaskType {
  id    String @id @default(cuid())
  name  String @unique // Ex: "Funcionalidade", "Bug", "Melhoria"
  icon  String // Nome do ícone da lucide-react (ex: "Bug", "Lightbulb", "Pencil")
  color String // Cor em hexadecimal (ex: "#3b82f6")

  tasks Task[]
}

model Role {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  permissions String[] @default([])

  // Relações
  users       User[]
  projectMemberships ProjectMember[]
}

model User {
  id        String   @id @default(cuid())
  name      String?
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  role   Role   @relation(fields: [roleId], references: [id])
  roleId String

  ownedProjects      Project[]        @relation("ProjectOwner")
  projectMemberships ProjectMember[]
  assignedTasks      Task[]           @relation("AssignedTasks")
  assignedSprints    Sprint[]         @relation("AssignedSprints")
  comments           Comment[]
}

model Project {
  id          String    @id @default(cuid())
  name        String
  description String?
  status      ProjectStatus @default(active)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  owner   User   @relation("ProjectOwner", fields: [ownerId], references: [id])
  ownerId String

  memberships ProjectMember[]
  sprints Sprint[]
  tasks   Task[]
}

model ProjectMember {
  id        String @id @default(cuid())

  role   Role   @relation(fields: [roleId], references: [id])
  roleId String

  user      User    @relation(fields: [userId], references: [id])
  userId    String
  project   Project @relation(fields: [projectId], references: [id])
  projectId String

  @@unique([userId, projectId])
}

model Sprint {
  id        String    @id @default(cuid())
  name      String
  startDate DateTime?
  endDate   DateTime?
  storyPointsCommitted Int? @default(0)
  storyPointsCompleted Int? @default(0)

  project   Project @relation(fields: [projectId], references: [id])
  projectId String

  user   User   @relation("AssignedSprints", fields: [userId], references: [id])
  userId String

  tasks Task[]
}

model Task {
  id          String    @id @default(cuid())
  title       String
  description String?
  status      TaskStatus    @default(todo)
  priority    TaskPriority  @default(medium)
  storyPoints Int?        @default(0)
  dueDate     DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String

  sprint   Sprint? @relation(fields: [sprintId], references: [id])
  sprintId String?

  assignee   User?   @relation("AssignedTasks", fields: [assigneeId], references: [id])
  assigneeId String?

  type     TaskType? @relation(fields: [typeId], references: [id])
  typeId   String?

  subtasks  Subtask[]
  comments  Comment[]
  attachments Attachment[]
}

model Subtask {
  id          String   @id @default(cuid())
  title       String
  completed   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  task   Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId String
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())

  task   Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId String

  author   User   @relation(fields: [authorId], references: [id])
  authorId String
}

model Attachment {
  id        String   @id @default(cuid())
  fileName  String
  url       String
  fileType  String
  createdAt DateTime @default(now())

  task   Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId String
}
